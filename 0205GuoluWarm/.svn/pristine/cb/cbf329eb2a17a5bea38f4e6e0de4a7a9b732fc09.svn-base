package edu.xust.warn;

import java.util.Date;

import org.quartz.CronScheduleBuilder;
import org.quartz.CronTrigger;
import org.quartz.DateBuilder;
import org.quartz.JobBuilder;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.xust.job.FanJob;
import edu.xust.job.ShuGuanJob;

public class Core {
	private static Logger log = LoggerFactory.getLogger(Core.class);
	private static Scheduler sched = getScheduler();

	/**
	 * 创建一个调度对象
	 * 
	 * @return
	 * @throws SchedulerException
	 */
	private static Scheduler getScheduler() {
		log.info("------- Initializing ----------------------");
		SchedulerFactory sf = new StdSchedulerFactory();
		Scheduler scheduler = null;
		try {
			scheduler = sf.getScheduler();
		} catch (SchedulerException e) {
			e.printStackTrace();
		}
		log.info("------- Initialization Complete -----------");

		return scheduler;
	}

	public void run() throws Exception {

		log.info("------- Scheduling Job  -------------------");

		//风机任务定义
		JobDetail job = JobBuilder.newJob(FanJob.class)
				.withIdentity("FanJob", "group1").build();
		
//    	cron表达式是一个由7个子表达式组成的字符串，各个子表达式通过空白符分隔，分别描述了调度的详细信息。
//	    秒
//	    分
//	    小时
//	    每月的第几天
//	    月
//	    每周的第几天
//	    年(可选的)
//		”0 0 12 ? * WED”，表示每个礼拜三的12点。
//		”0 0 12 ? * WED”，表示每个礼拜三的12点。0 0/5 * * * ?" : 每隔5分钟触发一次
//		"10 0/5 * * * ?" : 从每分钟的第10秒开始，每隔五分钟触发
//		"0 30 10-13 ? * WED,FRI" : 每个周三，周五的10:30,11:30,12:30和13:30触发
		/* 
		-------------------------------------- 
		    0 0 12 * * ?            每天12点触发 
		    0 15 10 ? * *           每天10点15分触发 
		    0 15 10 * * ?           每天10点15分触发 
		    0 15 10 * * ? *         每天10点15分触发 
		    0 15 10 * * ? 2005      2005年每天10点15分触发 
		    0 * 14 * * ?            每天下午的 2点到2点59分每分触发 
		    0 0/5 14 * * ?          每天下午的 2点到2点59分(整点开始，每隔5分触发) 
		    0 0/5 14,18 * * ?       每天下午的 2点到2点59分(整点开始，每隔5分触发) 每天下午的 18点到18点59分(整点开始，每隔5分触发) 
		    0 0-5 14 * * ?          每天下午的 2点到2点05分每分触发 
		    0 10,44 14 ? 3 WED      3月分每周三下午的 2点10分和2点44分触发 
		    0 15 10 ? * MON-FRI     从周一到周五每天上午的10点15分触发 
		    0 15 10 15 * ?          每月15号上午10点15分触发 
		    0 15 10 L * ?           每月最后一天的10点15分触发 
		    0 15 10 ? * 6L          每月最后一周的星期五的10点15分触发 
		    0 15 10 ? * 6L 2002-2005    从2002年到2005年每月最后一周的星期五的10点15分触发 
		    0 15 10 ? * 6#3         每月的第三周的星期五开始触发 
		    0 0 12 1/5 * ?          每月的第一个中午开始每隔5天触发一次 
		    0 11 11 11 11 ?         每年的11月11号 11点11分触发(光棍节) 
		-------------------------------------- 
		参考：http://wwwcomy.iteye.com/blog/1743854
		 */  
		//风机触发器定义，每10秒执行一次
		CronTrigger trigger = (CronTrigger) TriggerBuilder
				.newTrigger()
				.withIdentity("FanJobTrigger", "group1")
				.withSchedule(
						CronScheduleBuilder.cronSchedule("0/5 * * * * ?"))
				.build();

		Date ft = sched.scheduleJob(job, trigger);
		log.info(job.getKey() + " has been scheduled to run at: " + ft
				+ " and repeat based on expression: "
				+ trigger.getCronExpression());

		log.info("------- Starting Job Complete ----------------");
		log.info("------- Starting Scheduler ----------------");
		sched.start();
		log.info("------- Started Scheduler -----------------");


//		log.info("------- Shutting Down ---------------------");
		// sched.shutdown(true);
//		log.info("------- Shutdown Complete -----------------");
		
		
		
		
		//风机任务定义
		         job = JobBuilder.newJob(ShuGuanJob.class)
						.withIdentity("ShuGuanJob", "group1").build();
				
				//风机触发器定义，每10秒执行一次
			    trigger = (CronTrigger) TriggerBuilder
						.newTrigger()
						.withIdentity("ShuGuanJobTrigger", "group1")
						.withSchedule(
								CronScheduleBuilder.cronSchedule("0/5 * * * * ?"))
						.build();

				 ft = sched.scheduleJob(job, trigger);
				log.info(job.getKey() + " has been scheduled to run at: " + ft
						+ " and repeat based on expression: "
						+ trigger.getCronExpression());
				
	}

	public static void main(String[] args) throws Exception {
		Core example = new Core();
		example.run();
	}
}
