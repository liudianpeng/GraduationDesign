package edu.xust.expert.fan;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.xust.job.FanJob;
import edu.xust.db.MyDB;
import edu.xust.expert.Expert;

public class FanExpert implements Expert {
	private static Logger log = LoggerFactory.getLogger(FanJob.class);

	@Override
	public void start() {
		// TODO Auto-generated method stub
		try {
			log.info("风机专家 - 开始分析" + new Date());
	       //new ProcessFlow().getProcessFlow();
	      	
			FanParameter fanParameter=new FanParameter();
			String sql_select_1="select top 1 * from FJ_FanParameter order by CollectTime desc";
			ResultSet  rs_1 = MyDB.executeQuerySql(sql_select_1);
			log.info("--------读取一条最新参数--------------");
					while(rs_1.next()){
						fanParameter.setFanParameterId(rs_1.getString("FanParameterId"));
						fanParameter.setLevelShock(rs_1.getDouble("LevelShock"));
						fanParameter.setVerticalShock(rs_1.getDouble("VerticalShock"));
						fanParameter.setBearingTemp(rs_1.getDouble("BearingTemp"));	
						fanParameter.setThreeVoltage(rs_1.getDouble("ThreeVoltage"));
						fanParameter.setThreeCurrentIu(rs_1.getDouble("ThreeCurrentIu"));
						fanParameter.setThreeCurrentIv(rs_1.getDouble("ThreeCurrentIv"));
						fanParameter.setThreeCurrentIw(rs_1.getDouble("ThreeCurrentIw"));
						fanParameter.setWindingTemp(rs_1.getDouble("WindingTemp"));
						fanParameter.setActualWindPressure(rs_1.getDouble("ActualWindPressure"));
						fanParameter.setActualWorkVolume(rs_1.getDouble("ActualWorkVolume"));
						fanParameter.setFrequencySpeed(rs_1.getDouble("FrequencySpeed"));	
						fanParameter.setFlag(rs_1.getInt("Flag"));	
					}
	
		List<FanParameter> fanParameters=new ArrayList<FanParameter>();
		String sql_select_2="select top 2 * from FJ_FanParameter order by CollectTime desc";
		ResultSet rs = MyDB.executeQuerySql(sql_select_2);
				while(rs.next()){	
					FanParameter fanParameter1=new FanParameter();
					fanParameter1.setLevelShock(rs.getDouble("LevelShock"));
					fanParameter1.setVerticalShock(rs.getDouble("VerticalShock"));
					fanParameter1.setBearingTemp(rs.getDouble("BearingTemp"));	
					fanParameter1.setThreeVoltage(rs.getDouble("ThreeVoltage"));
					fanParameter1.setThreeCurrentIu(rs.getDouble("ThreeCurrentIu"));
					fanParameter1.setThreeCurrentIv(rs.getDouble("ThreeCurrentIv"));
					fanParameter1.setThreeCurrentIw(rs.getDouble("ThreeCurrentIw"));
					fanParameter1.setWindingTemp(rs.getDouble("WindingTemp"));
					fanParameter1.setActualWindPressure(rs.getDouble("ActualWindPressure"));
					fanParameter1.setActualWorkVolume(rs.getDouble("ActualWorkVolume"));
					fanParameter1.setFrequencySpeed(rs.getDouble("FrequencySpeed"));	
					fanParameter1.setFlag(rs.getInt("Flag"));	
					fanParameters.add(fanParameter1);
				}
		
	    //看当前一条参数记录是否执行过，如果flag的值是0没有执行，默认情况插入一条记录时的值是0
	     //如果是1  则已经执行过，不在执行
	    int flag=fanParameter.getFlag();
	    if(flag==0){
	    	//更新当前记录的状态，标识为已经使用过    flag=1
	    	String sql_update="update FJ_FanParameter set Flag=1 where FanParameterId='"+fanParameter.getFanParameterId()+"'";
		    Boolean flag_update=MyDB.executeSql(sql_update);
		    //执行模型处理方法	
		    AlertModel alertModel=new AlertModel();	    
		    //以下返回结果均为故障编码
			String strSpindleTrouble=alertModel.SpindleTrouble(fanParameter);//风机主轴故障   B0100
			String strCouplerTrouble=alertModel.CouplerTrouble(fanParameter);// 联轴器故障   B0400
			String strImpellerVaneTrouble=alertModel.ImpellerVaneTrouble(fanParameter);//工作轮、叶片故障     B0200
			String strMotorBlockTrouble=alertModel.MotorBlockTrouble(fanParameter);//电机堵转故障     B0600
			String strMotorOverloadTrouble=alertModel.MotorOverloadTrouble(fanParameter);//电机过载故障     B0700
			String strPerformanceUnstable=alertModel.PerformanceUnstable(fanParameter);//工况性能不稳定性 B1000
			String strPerformanceUn=alertModel.PerformanceUn(fanParameter);//风机工况性能不经济性  B1100
			String  strMotorGroundTrouble=alertModel.MotorGroundTrouble(fanParameter);// 电机接地故障    B0800
			String  strPhaseFaultTrouble=alertModel.PhaseFaultTrouble(fanParameter); //电机相间短路故障   B0900
			String  strStatorfalutTrouble=alertModel.StatorfalutTrouble(fanParameters);//电机缺相故障  B0900
			String  strMotorBearTrouble=alertModel.MotorBearTrouble(fanParameter);//电机轴承故障   B0300
			
			//将故障编码放入数组中
			String[] result={strSpindleTrouble,strCouplerTrouble,strImpellerVaneTrouble,
					strMotorBlockTrouble,strMotorOverloadTrouble,strPerformanceUnstable,strPerformanceUn,
					strMotorGroundTrouble,strPhaseFaultTrouble,strStatorfalutTrouble,strMotorBearTrouble};
            String[] troubleClass={"风机主轴","联轴器","工作轮叶片","电机堵转","电机过载","稳定性","经济性","电机接地","电机相间短路","电机缺相","电机轴承 "};				
			
        
			for(int i=0;i<result.length;i++){
				//  getIsSaveAlertInfo中的 IsSaveAlertInfo()方法判断是否出现故障，如果出现故障则输出故障信息	  
				if(IsAlertInfo(result[i])==1){
            		//判断该条故障预警是否需要报警，报警为1  不报警为0      
				 	String uuid=getUUID();
                  AlertParameter alertInfo_1=new AlertParameter(uuid,result[i],troubleClass[i],1);
                 //存储预警信息
             
                  String sql_insert_1="insert into FJ_FanAlert (AlertId,AlertCode,TroubleClass,AlertState)" +
          		   		" values ('"+alertInfo_1.getAlertId()+"','"+alertInfo_1.getAlertCode()+"','"+alertInfo_1.getTroubleClass()+"',"+alertInfo_1.getAlertState()+")";
                  Boolean flag_insert_1=MyDB.executeSql(sql_insert_1);
             	 log.info("--------"+troubleClass[i]+",报警---------------------");
            	}else{
            		String uuid=getUUID();
            		 AlertParameter alertInfo_0=new AlertParameter(uuid,"00000",troubleClass[i],0);
            		 String sql_insert_0="insert into FJ_FanAlert (AlertId,AlertCode,TroubleClass,AlertState)" +
               		   		" values ('"+alertInfo_0.getAlertId()+"','"+alertInfo_0.getAlertCode()+"','"+alertInfo_0.getTroubleClass()+"',"+alertInfo_0.getAlertState()+")";
            		 Boolean flag_insert_0=MyDB.executeSql(sql_insert_0);
            		 log.info("--------"+troubleClass[i]+",正常---------------------");
            	}     
            }				
		}else{
			 log.info("-------没有数据更新--------------------");
		}	
	    
	    
			log.info("风机专家 - 结束分析" + new Date());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	//生成uuid主键
	public  String getUUID() {
		UUID  uuid=UUID.randomUUID();
		String str= uuid.toString();
		return str;
	}
	
	
	//判断是否报警

		public int  IsAlertInfo(String alertCode){
			int flag=1;
			if(alertCode.equals("00000")){
				flag=0;
			}	
			return flag;
		}

}
