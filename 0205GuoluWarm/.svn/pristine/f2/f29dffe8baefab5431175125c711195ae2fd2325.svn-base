package edu.xust.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sun.rowset.CachedRowSetImpl;



//共用的访问数据库的接口
public class MyDB {
	private static Logger log = LoggerFactory.getLogger(MyDB.class);
	public static Connection getConnection() {
		
		return getConnection(DbConfig.getInstance().getProperty("db_url"), DbConfig.getInstance().getProperty("user_name"), DbConfig.getInstance().getProperty("password"));
	}
	public static Connection getConnection(String url, String user, String password) {
		Connection conn = null;
		try {
			Class.forName(DbConfig.getInstance().getProperty("driver_name"));
			// System.out.println(DbConfig.getInstance().getProperty("driver_name") +url+user+
			// password);
			conn = DriverManager.getConnection(url, user, password);
			// System.out.println(url);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			log.warn("JDBC驱动类未找到");
//			System.out.println("No Class Name... ");
		} catch (SQLException e) {
			e.printStackTrace();
			log.warn("JDBCJDBC连接数据库失败");
//			System.out.println("Connection failed.... ");
		}
		return conn;
	}

	protected static void closeDB(Connection conn, PreparedStatement pstmt,
			ResultSet rs) {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
			if (conn != null) {
				conn.close();
				conn = null;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.info("JDBCJDBC连接关闭失败");
//			System.out.println("Close failed.... ");
		}
	}
	//	数据的查询方法
	public static ResultSet executeQuerySql(String querySql) {
        CachedRowSetImpl rowset = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			rowset=new CachedRowSetImpl();
			conn = DbPool.getInstance().getConnection();
			pstmt = conn.prepareStatement(querySql);
			rs = pstmt.executeQuery();
			rowset.populate(rs);					
			return rowset;
		} catch (Exception e) {
			// TODO Auto-generated catch block环境很好将
			log.error(querySql);

			e.printStackTrace();
			return null;
		} finally {
			closeDB(conn, pstmt, rs);
		}
	}
	
	// 数据的增、删、改方法
	public static boolean  executeSql(String Sql) {
		Connection conn = null;
		PreparedStatement pstmt = null;

		try {
			conn = DbPool.getConnection();
			pstmt = conn.prepareStatement(Sql);
			pstmt.execute();
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			log.error(Sql);
			e.printStackTrace();
			return false;
		} finally {
			closeDB(conn, pstmt, null);
		}
	}
}
