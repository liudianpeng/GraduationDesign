NewPeanuthull client 2.7.0.5532
诊断域名: 1w5251n552.imwork.net
检测DNS服务器IP地址: 103.44.145.245

域名IP地址指向: 122.228.19.57
花生壳客户端IP: 113.132.139.90
经检测,您的域名已开启花生壳映射.

正在测试映射 1w5251n552.imwork.net:80->成功
局域网服务器 127.0.0.1:8088->成功


ConnObject.URLName="jdbc:sqlserver://localhost:1433;databaseName=equipment_maintenance_service";
方式一：
数据库操作核心代码：
Class.forName("oracle.jdbc.driver.OracleDriver");
//加载驱动
Connection conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","123456");
//数据库连接
Statement   stmt = conn.createStatement();//实例化数据库操作对象
stmt.executeUpdate(sql);//用于更新，sql必须是一个更新语句
stmt.executeQuery(sql);//用于查询，sql必须是一个查询语句
还有就是要将架包导入工程buildpath设置为当前使用的。

方式二：
数据库操作核心代码：
Class.forName("oracle.jdbc.driver.OracleDriver");
//加载驱动
Connection conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","123456");
//数据库连接
PreparedStatement prep=conn.prepareStatement(sql语句)
Sql语句：
insert into tablename(name,age,salary)values(?,?,?);
prep.setString(1,”按时到哈市”);
prep.setDouble(2,456.23);
prep.setInt(3,123);
prep.executeUpdate();


(6)如何获取请求参数
方法一：
String name=arg0.getParameter("name");
注意：
A：如果getParameter函数的参数和实际的参数名称不一致，会返回null
B:在使用表单提交数据时，如果用户没有填写任何的值，就会获得””
方法二：String[]
 	request.ParameterValues(String paraName);
注意：
A:当有多个参数名称相同时，使用该方法。
比如：?city=bj&city=sh&city=wh


9、转发和重定向的区别：
	1、转发的目的地只能是同一个应用内部某个组件的地址，而重定向的目的地是任意的。
	2、转发之后，浏览器的地址不变，而重定向后会变。
	3、转发所涉及的各个组件可以共享request对象，而重定向不可以。
	4、转发没有通信所以可以共享request，而重定向已经通信。
	5、转发是一件事情没有做完，而重定向是一件事情做完了。
	6、重定向的路径一定不能在WEB-INF路径下，因为重定向是相当于用户直接访问了路径，
	而用户不能访问WEB-INF目录下的文件，只有程序内部转发的时候才能转发到WEB-INF下的JSP。


转发时的路径问题
String path = request.getContextPath();
String str="jsp/login.jsp";
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/"+str;
服务器已经给你写到工程下了，所以你只许在地址参数中只需要填写str部分即可。
这也是为什么转发只能转发给本工程组件。

重定向时的路径问题
全部有自己写，这就是为什么重定向为什么可以定向到任意网段。
String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/jsp/"+filename+".jsp";

地址栏地址加密问题

自定义异常处理问题

线程安全问题

将数据保存在session、request。。。。。。这些的区别。
cookie
		cookie的生存时间
		默认情况下，浏览器会将cookie保存在内存中，只要浏览器不关闭cookie会一值存在。
			Cookie.	MaxAge(int seconds(秒));
			当seconds<0时：缺省值（浏览器将会cookie值保存在内存中）
			
		将少量的数据以set-cookie消息头的方式发送给浏览器
		cookie是一种客户端的状态管理技术
		Cookie的中文值或者名称只允许出现部分ascii字符串。
		Cookie只能够保存字符串。
		cookie路径问题。
session
		A、session是服务器端的状态管理技术。
		B、session是jsp内置对象，直接用即可，在servlet中可以用request.getSession()方法得到，
		     不需要自己创建实例，web容器已经提供好了。
		C、Session的超时
		     服务器会将空闲时间过长的session对象删除掉，服务器一般默认的session超时限制一般是30分钟，
		     可以修改这个默认的超时限制，比如:可以修改tomcat的web.xml文件。
		
<%
	Usermodal user=(Usermodal)session.getAttribute("user");
	String username=user.getUser_name();
	String userpasswd=user.getUser_name();
%>
	
1、访问需要控制吗？

2、需要时，过滤器需要写吗？

3、或者监听器需要写吗？

4、还有依赖注入是否能用到本项目中从而简化程序的编写。

5、各种web参数的配置

6、el表达式的应用或者标签的使用

7、配置文件config路径问题


(4)get请求和post请求
A:哪些情况下浏览器会使用get方式发送请求。
	直接在浏览器地址栏输入某个地址
	点击链接
	表单默认的提交方式
B:哪些情况下浏览器会使用post方式发送请求。
	设置表单的method属性值为”post”时
C：get请求特点
	浏览器会将请求参数添加到请求资源路径的后面。
	因为请求行存放的数据大小有限，所以get请求只能提交	较少的数据(2k左右)
	get请求会将请求参数显示在浏览器地址栏上。(不安全)
D：post请求特点
	post请求会将请求参数添加到实体内容里面所以可以提交大量的数据。
	post请求不会将请求参数显示在浏览器地址栏上。(相对安全)
	注意：post请求并不会对请求参数进行加密处理。
	通过https协议可以加密，此方式加密不需要编程，只需要对服务器进行相应的配置即可。


(5)编码问题
A:java语言在内存当中，会使用”unicode”编码格式(字符集)来保存字符。
B:编码
	把Unicode这种编码格式对应的字节数组转换为某种本地格式的(如：GBK)对应的字节数组。
	Unicode—>GBK
C:解码
	把某种本地编码格式的字节数字转换为Unicode这种编码个式对应的字节数组。
D:编码常见问题
	1、如果浏览器要输出中文需要调用
		response.setContentType("text/html;charset=utf-8");
		注意：charset=utf-8用来指定编码格式，只要是能支持中文的编码格式均可。

	2、如果表单有中文参数值也需要注意编码问题
		因为当表单提交的时候，浏览器会对表单中的数据进行编码(会使用打开表单时的编码格式进行编码)，而服务器在默认情况下会使用iso-8859-1去解码，所以，会产生乱码问题。
		解决服务器获取数据时出现的编码问题
		解决方式一：
			Step1：先保证表单所在页面按照指定的编码格式打开。
				使用<meta http-equiv=”content-type”
				content=”text/html;charset=utf-8”>
			Step2:调用request.setCharacterEncoding(“utf-8”);
				意思是告诉服务器，使用指定格式的编码进行解码，该方法一定要在取数据之前设置。
		注意：方法仅仅适用于post提交方式的编码。


		解决方式二：
			Step1：和解决方式一相同。
			Step2：
				String uname=request.getParament(“uname”);
				uname=new String(uname.getBytes(“ios-8859-1”),”utf-8”);
		注意：此方法适合get和post方法。
		
		
<c:forEach items="${list}"  var="li" >
${li.age}
</c:forEach>
  <!-- 用来遍历集合 ，items用来指定要遍历的集合，可以使用el表达式，
  var指定绑定名，绑定范围是pageContext，绑定值是集合中的某个元素。-->
  
  
  el表达式如何获取超链接参数问题
  request.getAttribute("username");等价于${requestScope.username}等价于${username}
  request.getParameter("username");等价于${param.username}
  
  js实现页面间的跳转问题且带有参数以及跳转的方式：新打开一个页面、在原来页面的基础上等
  window.location.href="jsp/faultalter.jsp?tablename=${Fault.table_name} & falut_Number="+arr[t-1].value+" & backurl="+window.location.href;
